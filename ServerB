using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Threading;

public enum ServerBStatus
{
    Stopped = 0,
    Connected = 1,
    Error = 3
}

public class ServerB
{
    private TcpListener tcpListener;
    private TcpClient tcpClient;
    private NetworkStream stream;
    private Thread receiveThread;
    private Queue<byte[]> sendQueue = new Queue<byte[]>();
    private object queueLock = new object();
    private bool isBusy = false;

    public event EventHandler<byte[]> SBR;
    public event EventHandler<byte[]> SBS;

    private ServerBStatus status = ServerBStatus.Stopped;

    public ServerBStatus GetStatus()
    {
        return status;
    }

    public void Start(int port)
    {
        tcpListener = new TcpListener(System.Net.IPAddress.Any, port);
        tcpListener.Start();

        status = ServerBStatus.Connected;

        // Start a thread to listen for incoming connections
        receiveThread = new Thread(ListenForClients);
        receiveThread.Start();
    }

    public void Stop()
    {
        tcpListener.Stop();
        status = ServerBStatus.Stopped;
    }

    public void EnqueueDataToSend(byte[] data)
    {
        lock (queueLock)
        {
            sendQueue.Enqueue(data);
            isBusy = true;
        }
    }

    private void ListenForClients()
    {
        try
        {
            tcpClient = tcpListener.AcceptTcpClient();
            stream = tcpClient.GetStream();

            while (true)
            {
                byte[] buffer = new byte[1024]; // Adjust the buffer size as needed
                int bytesRead = stream.Read(buffer, 0, buffer.Length);

                if (bytesRead > 0)
                {
                    SBR?.Invoke(this, buffer);

                    byte[] replyData = new byte[35]; // Assuming fixed-length response for now
                    stream.Write(replyData, 0, replyData.Length);

                    lock (queueLock)
                    {
                        if (sendQueue.Count > 0)
                        {
                            byte[] nextData = sendQueue.Dequeue();
                            SBS?.Invoke(this, nextData);
                        }
                        else
                        {
                            isBusy = false;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Server B Error: {ex.Message}");
            status = ServerBStatus.Error;
        }
    }
}
